{"mappings":"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","sources":["src/v8-mvc/features/game/domain/guess.ts","node_modules/@swc/helpers/src/_define_property.mjs","src/v8-mvc/index.ts","src/v8-mvc/features/game/infrastructure/words-http-repository.ts","src/v8-mvc/features/game/domain/word-validator.ts","src/v8-mvc/features/game/application/get-word-guesses-use-case.ts","src/v8-mvc/features/game/application/get-random-word-to-guess-use-case.ts","src/v8-mvc/features/game/delivery/view.ts","src/v8-mvc/features/game/delivery/controller.ts"],"sourcesContent":["export enum Guess {\n  EMPTY = -2,\n  NOT_PRESENT = -1,\n  PRESENT_BUT_NOT_IN_CORRECT_POSITION = 0,\n  PRESENT_AND_IN_CORRECT_POSITION = 1,\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import { GetWordGuessesUseCase } from './features/game/application/get-word-guesses-use-case'\nimport { WordValidator } from './features/game/domain/word-validator'\nimport { View } from './features/game/delivery/view'\nimport { Controller } from './features/game/delivery/controller'\nimport { GetRandomWordToGuessUseCase } from './features/game/application/get-random-word-to-guess-use-case'\nimport { WordsHttpRepository } from './features/game/infrastructure/words-http-repository'\n\nconst wordsRepository = new WordsHttpRepository(window.fetch.bind(this))\nconst wordValidator = new WordValidator()\nconst getWordGuessesUseCase = new GetWordGuessesUseCase(wordValidator)\nconst getRandomWordToGuessUseCase = new GetRandomWordToGuessUseCase(wordsRepository)\n\nconst view = new View()\nconst controller = new Controller(view, getWordGuessesUseCase, getRandomWordToGuessUseCase)\ncontroller.start()\n\nexport {}\n","import { Word } from '../domain/word'\nimport { WordsRepository } from '../domain/words-repository'\n\nexport class WordsHttpRepository implements WordsRepository {\n  constructor(private readonly fetcher: typeof globalThis.fetch) {}\n\n  findAll(): Promise<Word[]> {\n    return this.fetcher(\n      'https://gist.githubusercontent.com/cesalberca/3d0e343842c7697e0f788178e59fb471/raw/22bfe35c910dd02db78fec87fa39ca25cc604816/data.json',\n    ).then(x => x.json())\n  }\n}\n","import { Guess } from './guess'\n\nexport class WordValidator {\n  validate(wordToTry: string, wordToGuess: string): Guess[] {\n    return wordToTry.split('').map((letterToTry, indexLetterToGuess) => {\n      const letterToGuess = wordToGuess[indexLetterToGuess]\n      if (letterToTry === letterToGuess) {\n        return Guess.PRESENT_AND_IN_CORRECT_POSITION\n      }\n\n      if (wordToGuess.includes(letterToTry)) {\n        return Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION\n      }\n\n      return Guess.NOT_PRESENT\n    })\n  }\n}\n","import { WordValidator } from '../domain/word-validator'\nimport { Guess } from '../domain/guess'\n\nexport class GetWordGuessesUseCase {\n  constructor(private readonly wordValidator: WordValidator) {}\n\n  async execute(wordToTry: string, wordToGuess: string): Promise<Guess[]> {\n    return this.wordValidator.validate(wordToTry, wordToGuess)\n  }\n}\n","import { WordsHttpRepository } from '../infrastructure/words-http-repository'\n\nexport class GetRandomWordToGuessUseCase {\n  constructor(private readonly wordsRepository: WordsHttpRepository) {}\n\n  async execute(seed: number) {\n    const words = await this.wordsRepository.findAll()\n    const wordToGuess = words[Math.floor(seed * words.length)]\n    return wordToGuess\n  }\n}\n","import { Guess } from '../domain/guess'\n\nexport class View {\n  private boardElement = document.querySelector<HTMLDivElement>('#board')!\n  private form = document.querySelector<HTMLFormElement>('#form')!\n  private element = document.querySelector<HTMLInputElement>('#input')!\n\n  private boardLength: number\n  private maxRows = 6\n\n  start(maxRows: number, rowLength: number, tries: Guess[][], triedWords: string[]) {\n    this.maxRows = maxRows\n    this.boardLength = rowLength\n    this.printBoard(tries, triedWords)\n  }\n\n  printBoard(tries: Guess[][], triedWords: string[]) {\n    this.clearBoard()\n    for (let i = 0; i < this.maxRows; i++) {\n      this.printRow(tries[i], triedWords[i])\n    }\n  }\n\n  addEventListeners(onGuessWord: Function) {\n    this.form.addEventListener('submit', async (event: Event) => {\n      event.preventDefault()\n\n      if (!this.element.value) {\n        return\n      }\n\n      await onGuessWord(this.element.value)\n    })\n  }\n\n  showWonMessage() {\n    alert('You won! Try again!')\n  }\n\n  showLostMessage(wordToGuess: string) {\n    alert(`You lost! The word to guess was ${wordToGuess}. Try again!`)\n  }\n\n  clearInput() {\n    this.element.value = ''\n  }\n\n  private clearBoard() {\n    this.boardElement.innerHTML = ''\n  }\n\n  private printRow(guesses: Guess[], triedWord?: string) {\n    const wordDiv = document.createElement('div')\n    wordDiv.setAttribute('class', 'row')\n\n    for (let i = 0; i < this.boardLength; i++) {\n      this.printLetterCell(wordDiv, guesses[i], triedWord?.[i])\n      this.boardElement.appendChild(wordDiv)\n    }\n  }\n\n  private printLetterCell(element: HTMLDivElement, guess: Guess, triedLetter?: string) {\n    const div = document.createElement('div')\n    div.classList.add('cell')\n    if (triedLetter !== undefined) {\n      div.innerHTML = triedLetter\n    }\n\n    let className = ''\n    switch (guess) {\n      case Guess.NOT_PRESENT:\n        className = 'not-present'\n        break\n      case Guess.PRESENT_AND_IN_CORRECT_POSITION:\n        className = 'present-and-in-correct-position'\n        break\n      case Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION:\n        className = 'present-but-not-in-correct-position'\n        break\n      case Guess.EMPTY:\n        className = 'empty'\n        break\n    }\n\n    div.classList.add(className)\n\n    element.appendChild(div)\n  }\n}\n","import { View } from './view'\nimport { GetWordGuessesUseCase } from '../application/get-word-guesses-use-case'\nimport { GetRandomWordToGuessUseCase } from '../application/get-random-word-to-guess-use-case'\nimport { Guess } from '../domain/guess'\n\nexport class Controller {\n  private wordToGuess = ''\n  private tries: Guess[][] = []\n  private triedWords: string[] = []\n  private maximumNumberOfTries = 6\n\n  constructor(\n    private readonly view: View,\n    private readonly getWordGuessesUseCase: GetWordGuessesUseCase,\n    private readonly getRandomWordToGuessUseCase: GetRandomWordToGuessUseCase,\n  ) {}\n\n  async start() {\n    const seed = Math.random()\n    this.wordToGuess = await this.getRandomWordToGuessUseCase.execute(seed)\n    this.generateEmptyGuesses()\n    console.log(this.wordToGuess)\n    this.view.start(this.maximumNumberOfTries, this.wordToGuess.length, this.tries, this.triedWords)\n    this.view.addEventListeners(this.wordHandler.bind(this))\n  }\n\n  async wordHandler(wordToTry: string) {\n    const result = await this.getWordGuessesUseCase.execute(wordToTry, this.wordToGuess)\n    this.tries[this.triedWords.length] = result\n    this.triedWords.push(wordToTry)\n\n    this.updateView()\n\n    if (this.isWordGuessed(result)) {\n      this.view.showWonMessage()\n      this.resetGame()\n      return\n    }\n\n    const isLastTry = this.triedWords.length === this.maximumNumberOfTries\n\n    if (isLastTry) {\n      this.view.showLostMessage(this.wordToGuess)\n      this.resetGame()\n    }\n\n    return result\n  }\n\n  private resetGame() {\n    this.tries = []\n    this.triedWords = []\n    this.start()\n  }\n\n  private updateView() {\n    this.view.printBoard(this.tries, this.triedWords)\n    this.view.clearInput()\n  }\n\n  private generateEmptyGuesses() {\n    for (let i = 0; i < this.maximumNumberOfTries; i++) {\n      const values: Guess[] = []\n      for (let j = 0; j < this.wordToGuess.length; j++) {\n        values.push(Guess.EMPTY)\n      }\n      this.tries.push(values)\n    }\n  }\n\n  private isWordGuessed(word: Guess[]) {\n    return word.every(x => x === Guess.PRESENT_AND_IN_CORRECT_POSITION)\n  }\n}\n"],"names":["$35863f3df3e859d4$export$7a872ecb27ac8565","Guess","EMPTY","NOT_PRESENT","PRESENT_BUT_NOT_IN_CORRECT_POSITION","PRESENT_AND_IN_CORRECT_POSITION","$9139f4380ced0e7c$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","wordsRepository","findAll","this","fetcher","then","x","json","constructor","window","fetch","bind","undefined","wordValidator","validate","wordToTry","wordToGuess","split","map","letterToTry","indexLetterToGuess","includes","getWordGuessesUseCase","async","getRandomWordToGuessUseCase","seed","words","Math","floor","length","view","start","maxRows","rowLength","tries","triedWords","boardLength","printBoard","clearBoard","i","printRow","addEventListeners","onGuessWord","form","addEventListener","event","preventDefault","element","showWonMessage","alert","showLostMessage","clearInput","boardElement","innerHTML","guesses","triedWord","wordDiv","document","createElement","setAttribute","printLetterCell","appendChild","guess","triedLetter","div","classList","add","className","querySelector","random","execute","generateEmptyGuesses","console","log","maximumNumberOfTries","wordHandler","result","push","updateView","isWordGuessed","resetGame","values","j","word","every"],"version":3,"file":"index.42cf0d88.js.map"}