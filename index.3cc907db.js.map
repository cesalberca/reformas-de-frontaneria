{"mappings":"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","sources":["src/v8-mvc/features/game/domain/guess.ts","node_modules/@swc/helpers/src/_define_property.mjs","src/v8-mvc/features/game/delivery/controller.ts","src/v8-mvc/index.ts","src/v8-mvc/features/game/infrastructure/words-local-repository.ts","src/v8-mvc/features/game/domain/word-validator.ts","src/v8-mvc/features/game/application/get-word-guesses-use-case.ts","src/v8-mvc/features/game/application/get-random-word-to-guess-use-case.ts","src/v8-mvc/features/game/delivery/view.ts"],"sourcesContent":["export enum Guess {\n  EMPTY = -2,\n  NOT_PRESENT = -1,\n  PRESENT_BUT_NOT_IN_CORRECT_POSITION = 0,\n  PRESENT_AND_IN_CORRECT_POSITION = 1,\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import { View } from './view'\nimport { GetWordGuessesUseCase } from '../application/get-word-guesses-use-case'\nimport { GetRandomWordToGuessUseCase } from '../application/get-random-word-to-guess-use-case'\nimport { Guess } from '../domain/guess'\n\nexport class Controller {\n  private static MAXIMUM_NUMBER_OF_TRIES = 6\n\n  private wordToGuess = ''\n  private tries: Guess[][] = []\n  private triedWords: string[] = []\n\n  constructor(\n    private readonly view: View,\n    private readonly getWordGuessesUseCase: GetWordGuessesUseCase,\n    private readonly getRandomWordToGuessUseCase: GetRandomWordToGuessUseCase,\n  ) {}\n\n  async start(): Promise<void> {\n    const seed = Math.random()\n    this.wordToGuess = await this.getRandomWordToGuessUseCase.execute(seed)\n    this.generateEmptyGuesses()\n    this.view.start(Controller.MAXIMUM_NUMBER_OF_TRIES, this.wordToGuess, this.tries, this.triedWords)\n    this.view.addEventListeners(this.wordHandler.bind(this))\n    console.log(this.wordToGuess)\n  }\n\n  async wordHandler(wordToTry: string): Promise<void> {\n    const result = await this.getWordGuessesUseCase.execute(wordToTry, this.wordToGuess)\n    this.tries[this.triedWords.length] = result\n    this.triedWords.push(wordToTry)\n\n    this.updateView()\n\n    if (this.isWordGuessed(result)) {\n      this.view.showWonMessage()\n      this.resetGame()\n      return\n    }\n\n    const isLastTry = this.triedWords.length === Controller.MAXIMUM_NUMBER_OF_TRIES\n\n    if (isLastTry) {\n      this.view.showLostMessage(this.wordToGuess)\n      this.resetGame()\n    }\n  }\n\n  private resetGame() {\n    this.tries = []\n    this.triedWords = []\n    this.start()\n  }\n\n  private updateView() {\n    this.view.printBoard(this.tries, this.triedWords)\n    this.view.clearInput()\n  }\n\n  private generateEmptyGuesses() {\n    for (let i = 0; i < Controller.MAXIMUM_NUMBER_OF_TRIES; i++) {\n      const values: Guess[] = []\n      for (let j = 0; j < this.wordToGuess.length; j++) {\n        values.push(Guess.EMPTY)\n      }\n      this.tries.push(values)\n    }\n  }\n\n  private isWordGuessed(word: Guess[]) {\n    return word.every(x => x === Guess.PRESENT_AND_IN_CORRECT_POSITION)\n  }\n}\n","import { GetWordGuessesUseCase } from './features/game/application/get-word-guesses-use-case'\nimport { WordValidator } from './features/game/domain/word-validator'\nimport { View } from './features/game/delivery/view'\nimport { Controller } from './features/game/delivery/controller'\nimport { GetRandomWordToGuessUseCase } from './features/game/application/get-random-word-to-guess-use-case'\nimport { WordsLocalRepository } from './features/game/infrastructure/words-local-repository'\n\nconst wordsRepository = new WordsLocalRepository()\nconst wordValidator = new WordValidator()\nconst getWordGuessesUseCase = new GetWordGuessesUseCase(wordValidator)\nconst getRandomWordToGuessUseCase = new GetRandomWordToGuessUseCase(wordsRepository)\n\nconst view = new View(window)\nconst controller = new Controller(view, getWordGuessesUseCase, getRandomWordToGuessUseCase)\ncontroller.start()\n\nexport {}\n","import { WordsRepository } from '../domain/words-repository'\nimport { Word } from '../domain/word'\n\nexport class WordsLocalRepository implements WordsRepository {\n  data = [\n    'lodash',\n    'chalk',\n    'eslint',\n    'react',\n    'dotenv',\n    'moment',\n    'async',\n    'debug',\n    'semver',\n    'mkdirp',\n    'rimraf',\n    'yargs',\n    'axios',\n    'redux',\n    'colors',\n    'mocha',\n    'tslint',\n    'jquery',\n    'yosay',\n    'is-wsl',\n    'morgan',\n    'ts-pnp',\n    'marked',\n    'globby',\n    'tslib',\n    'stylus',\n    'execa',\n    'enzyme',\n    'ramda',\n    'prompt',\n    'xml2js',\n    'figlet',\n    'redis',\n    'babel',\n    'extend',\n    'jsdom',\n    'sinon',\n    'which',\n    'karma',\n    'mysql',\n    'multer',\n    'husky',\n    'json5',\n    'helmet',\n    'acorn',\n    'bunyan',\n    'rollup',\n    'precss',\n    'clear',\n    'config',\n    'log4js',\n    'npmlog',\n    'slash',\n    'clone',\n    'nconf',\n    'yamljs',\n    'grunt',\n    'xtend',\n    'boxen',\n    'bcrypt',\n    'cookie',\n    'assert',\n    'events',\n    'merge',\n    'crypto',\n    'color',\n    'vinyl',\n    'watch',\n    'listr',\n    'bytes',\n    'touch',\n    'unzip',\n    'bower',\n    'github',\n    'merge2',\n    'plist',\n    'global',\n    'jszip',\n    'faker',\n    'xmldom',\n    'mockjs',\n    'string',\n    'pkg-up',\n    'cliui',\n    'osenv',\n    'bn.js',\n    'sharp',\n    'jshint',\n    'verror',\n    'opener',\n    'buffer',\n    'parse5',\n    'fresh',\n    'wrench',\n    'tar-fs',\n    'is-ci',\n    'ignore',\n    'should',\n    'expect',\n    'arrify',\n    'errno',\n    'split',\n    'upath',\n    'wrappy',\n    'serve',\n    'table',\n    'urijs',\n    'radium',\n    'xcode',\n    'vorpal',\n    'lowdb',\n    'recast',\n    'mysql2',\n    'jsesc',\n    'immer',\n    'vuejs',\n    'angular',\n  ]\n\n  async findAll(): Promise<Word[]> {\n    return this.data\n  }\n}\n","import { Guess } from './guess'\n\nexport class WordValidator {\n  validate(wordToTry: string, wordToGuess: string): Guess[] {\n    return wordToTry.split('').map((letterToTry, indexLetterToGuess) => {\n      const letterToGuess = wordToGuess[indexLetterToGuess]\n      if (letterToTry === letterToGuess) {\n        return Guess.PRESENT_AND_IN_CORRECT_POSITION\n      }\n\n      if (wordToGuess.includes(letterToTry)) {\n        return Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION\n      }\n\n      return Guess.NOT_PRESENT\n    })\n  }\n}\n","import { WordValidator } from '../domain/word-validator'\nimport { Guess } from '../domain/guess'\n\nexport class GetWordGuessesUseCase {\n  constructor(private readonly wordValidator: WordValidator) {}\n\n  async execute(wordToTry: string, wordToGuess: string): Promise<Guess[]> {\n    return this.wordValidator.validate(wordToTry, wordToGuess)\n  }\n}\n","import { WordsRepository } from '../domain/words-repository'\n\nexport class GetRandomWordToGuessUseCase {\n  constructor(private readonly wordsRepository: WordsRepository) {}\n\n  async execute(seed: number) {\n    const words = await this.wordsRepository.findAll()\n    const wordToGuess = words[Math.floor(seed * words.length)]\n    return wordToGuess\n  }\n}\n","import { Guess } from '../domain/guess'\n\nexport class View {\n  private readonly boardElement = this.global.document.querySelector<HTMLDivElement>('#board')!\n  private readonly form = this.global.document.querySelector<HTMLFormElement>('#form')!\n  private readonly element = this.global.document.querySelector<HTMLInputElement>('#input')!\n\n  private boardLength: number\n  private maxRows = 6\n\n  constructor(private readonly global: typeof globalThis) {}\n\n  start(maxRows: number, wordToGuess: string, tries: Guess[][], triedWords: string[]) {\n    this.maxRows = maxRows\n    this.boardLength = wordToGuess.length\n    this.printBoard(tries, triedWords)\n    this.setInputValidation(wordToGuess)\n  }\n\n  printBoard(tries: Guess[][], triedWords: string[]) {\n    this.clearBoard()\n    for (let i = 0; i < this.maxRows; i++) {\n      this.printRow(tries[i], triedWords[i])\n    }\n  }\n\n  addEventListeners(onGuessWord: Function) {\n    this.form.addEventListener('submit', async (event: Event) => {\n      event.preventDefault()\n\n      if (!this.element.value) {\n        return\n      }\n\n      await onGuessWord(this.element.value)\n    })\n  }\n\n  showWonMessage() {\n    alert('You won! Try again!')\n  }\n\n  showLostMessage(wordToGuess: string) {\n    alert(`You lost! The word to guess was ${wordToGuess}. Try again!`)\n  }\n\n  clearInput() {\n    this.element.value = ''\n  }\n\n  private setInputValidation(wordToGuess: string) {\n    this.element.setAttribute('maxlength', wordToGuess.length.toString())\n    this.element.setAttribute('minlength', wordToGuess.length.toString())\n  }\n\n  private clearBoard() {\n    this.boardElement.innerHTML = ''\n  }\n\n  private printRow(guesses: Guess[], triedWord?: string) {\n    const word = this.global.document.createElement('div')\n    word.classList.add('row')\n\n    for (let i = 0; i < this.boardLength; i++) {\n      this.printLetterCell(word, guesses[i], triedWord?.[i])\n      this.boardElement.appendChild(word)\n    }\n  }\n\n  private printLetterCell(element: HTMLDivElement, guess: Guess, triedLetter?: string) {\n    const div = this.global.document.createElement('div')\n    div.classList.add('cell')\n    if (triedLetter !== undefined) {\n      div.innerHTML = triedLetter\n    }\n\n    let className = ''\n    switch (guess) {\n      case Guess.NOT_PRESENT:\n        className = 'not-present'\n        break\n      case Guess.PRESENT_AND_IN_CORRECT_POSITION:\n        className = 'present-and-in-correct-position'\n        break\n      case Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION:\n        className = 'present-but-not-in-correct-position'\n        break\n      case Guess.EMPTY:\n        className = 'empty'\n        break\n    }\n\n    div.classList.add(className)\n\n    element.appendChild(div)\n  }\n}\n"],"names":["$76d609f95260c05b$export$7a872ecb27ac8565","Guess","EMPTY","NOT_PRESENT","PRESENT_BUT_NOT_IN_CORRECT_POSITION","PRESENT_AND_IN_CORRECT_POSITION","$bb9a5d09fff8458d$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Controller","async","seed","Math","random","this","wordToGuess","getRandomWordToGuessUseCase","execute","generateEmptyGuesses","view","start","MAXIMUM_NUMBER_OF_TRIES","tries","triedWords","addEventListeners","wordHandler","bind","console","log","wordToTry","result","getWordGuessesUseCase","length","push","updateView","isWordGuessed","showWonMessage","resetGame","showLostMessage","printBoard","clearInput","i","values","j","word","every","x","constructor","wordsRepository","data","wordValidator","validate","split","map","letterToTry","indexLetterToGuess","includes","words","findAll","floor","maxRows","boardLength","setInputValidation","clearBoard","printRow","onGuessWord","form","addEventListener","event","preventDefault","element","alert","setAttribute","toString","boardElement","innerHTML","guesses","triedWord","global","document","createElement","classList","add","printLetterCell","appendChild","guess","triedLetter","div","undefined","className","querySelector","window"],"version":3,"file":"index.3cc907db.js.map"}