{"mappings":"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","sources":["src/v9-mvc-refined/guess.ts","node_modules/@swc/helpers/src/_define_property.js","src/v9-mvc-refined/index.ts","src/v9-mvc-refined/words-repository.ts","src/v9-mvc-refined/word-validator.ts","src/v9-mvc-refined/get-word-guesses-use-case.ts","src/v9-mvc-refined/get-random-word-to-guess-use-case.ts","src/v9-mvc-refined/view.ts","src/v9-mvc-refined/controller.ts"],"sourcesContent":["export enum Guess {\n  EMPTY = -2,\n  NOT_PRESENT = -1,\n  PRESENT_BUT_NOT_IN_CORRECT_POSITION = 0,\n  PRESENT_AND_IN_CORRECT_POSITION = 1,\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import { GetWordGuessesUseCase } from './get-word-guesses-use-case'\nimport { WordValidator } from './word-validator'\nimport { View } from './view'\nimport { Controller } from './controller'\nimport { GetRandomWordToGuessUseCase } from './get-random-word-to-guess-use-case'\nimport { WordsRepository } from './words-repository'\n\nconst wordsRepository = new WordsRepository(window)\nconst wordValidator = new WordValidator()\nconst getWordGuessesUseCase = new GetWordGuessesUseCase(wordValidator)\nconst getRandomWordToGuessUseCase = new GetRandomWordToGuessUseCase(wordsRepository)\n\nconst view = new View()\nconst controller = new Controller(view, getWordGuessesUseCase, getRandomWordToGuessUseCase)\ncontroller.init()\n\nexport {}\n","type Word = string\n\nexport class WordsRepository {\n  constructor(private readonly global: typeof globalThis) {}\n\n  findAll(): Promise<Word[]> {\n    return this.global\n      .fetch(\n        'https://gist.githubusercontent.com/cesalberca/3d0e343842c7697e0f788178e59fb471/raw/22bfe35c910dd02db78fec87fa39ca25cc604816/data.json',\n      )\n      .then(x => x.json())\n  }\n}\n","import { Guess } from './guess'\n\nexport class WordValidator {\n  validate(wordToTry: string, wordToGuess: string): Guess[] {\n    if (wordToTry === wordToGuess) {\n      return Array.from<Guess>({ length: wordToGuess.length }).fill(Guess.PRESENT_AND_IN_CORRECT_POSITION)\n    }\n\n    return wordToTry.split('').map((letterToTry, indexLetterToGuess) => {\n      const letterToGuess = wordToGuess[indexLetterToGuess]\n      if (letterToTry === letterToGuess) {\n        return Guess.PRESENT_AND_IN_CORRECT_POSITION\n      }\n\n      if (wordToGuess.includes(letterToTry)) {\n        return Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION\n      }\n\n      return Guess.NOT_PRESENT\n    })\n  }\n}\n","import { WordValidator } from './word-validator'\nimport { Guess } from './guess'\n\nexport class GetWordGuessesUseCase {\n  constructor(private readonly wordValidator: WordValidator) {}\n\n  async execute(wordToTry: string, wordToGuess: string): Promise<Guess[]> {\n    return this.wordValidator.validate(wordToTry, wordToGuess)\n  }\n}\n","import { WordsRepository } from './words-repository'\n\nexport class GetRandomWordToGuessUseCase {\n  constructor(private readonly wordsRepository: WordsRepository) {}\n\n  async execute(seed: number) {\n    const words = await this.wordsRepository.findAll()\n    const wordToGuess = words[Math.floor(seed * words.length)]\n    return wordToGuess\n  }\n}\n","import { Guess } from './guess'\n\nexport class View {\n  private boardElement = document.querySelector<HTMLDivElement>('#board')!\n  private form = document.querySelector<HTMLFormElement>('#form')!\n  private element = document.querySelector<HTMLInputElement>('#input')!\n\n  private boardLength: number\n  private maximumNumberOfTries = 6\n\n  init(boardLength: number, tries: Guess[][], triedWords: string[]) {\n    this.boardLength = boardLength\n    this.printBoard(tries, triedWords)\n  }\n\n  printBoard(tries: Guess[][], triedWords: string[]) {\n    this.clearBoard()\n    for (let i = 0; i < this.maximumNumberOfTries; i++) {\n      this.printRow(tries[i], triedWords[i])\n    }\n  }\n\n  addEventListeners(onGuessWord: Function) {\n    this.form.addEventListener('submit', async (e: Event) => {\n      e.preventDefault()\n\n      if (!this.element.value) {\n        return\n      }\n\n      await onGuessWord(this.element.value)\n    })\n  }\n\n  showWonMessage() {\n    alert('You won! Try again!')\n  }\n\n  showLostMessage(wordToGuess: string) {\n    alert(`You lost! The word to guess was ${wordToGuess}. Try again!`)\n  }\n\n  clearInput() {\n    this.element.value = ''\n  }\n\n  private clearBoard() {\n    this.boardElement.innerHTML = ''\n  }\n\n  private printRow(guesses: Guess[], triedWord?: string) {\n    const wordDiv = document.createElement('div')\n    wordDiv.setAttribute('class', 'row')\n\n    for (let i = 0; i < this.boardLength; i++) {\n      this.printLetterCell(wordDiv, guesses[i], triedWord?.[i])\n      this.boardElement.appendChild(wordDiv)\n    }\n  }\n\n  private printLetterCell(element: HTMLDivElement, guess: Guess, triedLetter?: string) {\n    const div = document.createElement('div')\n    div.classList.add('cell')\n    if (triedLetter !== undefined) {\n      div.innerHTML = triedLetter\n    }\n\n    let className = ''\n    switch (guess) {\n      case Guess.NOT_PRESENT:\n        className = 'not-present'\n        break\n      case Guess.PRESENT_AND_IN_CORRECT_POSITION:\n        className = 'present-and-in-correct-position'\n        break\n      case Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION:\n        className = 'present-but-not-in-correct-position'\n        break\n      case Guess.EMPTY:\n        className = 'empty'\n        break\n    }\n\n    div.classList.add(className)\n\n    element.appendChild(div)\n  }\n}\n","import { View } from './view'\nimport { GetWordGuessesUseCase } from './get-word-guesses-use-case'\nimport { GetRandomWordToGuessUseCase } from './get-random-word-to-guess-use-case'\nimport { Guess } from './guess'\n\nexport class Controller {\n  private wordToGuess = ''\n  private tries: Guess[][] = []\n  private triedWords: string[] = []\n  private maximumNumberOfTries = 6\n\n  constructor(\n    private readonly view: View,\n    private readonly getWordGuessesUseCase: GetWordGuessesUseCase,\n    private readonly getRandomWordToGuessUseCase: GetRandomWordToGuessUseCase,\n  ) {}\n\n  init = async () => {\n    const seed = Math.random()\n    this.wordToGuess = await this.getRandomWordToGuessUseCase.execute(seed)\n    this.generateEmptyGuesses()\n    console.log(this.wordToGuess)\n    this.view.init(this.wordToGuess.length, this.tries, this.triedWords)\n    this.view.addEventListeners(this.wordHandler)\n  }\n\n  wordHandler = async (wordToTry: string) => {\n    const result = await this.getWordGuessesUseCase.execute(wordToTry, this.wordToGuess)\n    this.tries[this.triedWords.length] = result\n    this.triedWords.push(wordToTry)\n\n    this.updateView()\n\n    if (this.isWordGuessed(result)) {\n      this.view.showWonMessage()\n      this.resetGame()\n      return\n    }\n\n    const isLastTry = this.triedWords.length === this.maximumNumberOfTries\n\n    if (isLastTry) {\n      this.view.showLostMessage(this.wordToGuess)\n      this.resetGame()\n    }\n\n    return result\n  }\n\n  private resetGame() {\n    this.tries = []\n    this.triedWords = []\n    this.init()\n  }\n\n  private updateView() {\n    this.view.printBoard(this.tries, this.triedWords)\n    this.view.clearInput()\n  }\n\n  private generateEmptyGuesses() {\n    for (let i = 0; i < this.maximumNumberOfTries; i++) {\n      const values: Guess[] = []\n      for (let j = 0; j < this.wordToGuess.length; j++) {\n        values.push(Guess.EMPTY)\n      }\n      this.tries.push(values)\n    }\n  }\n\n  private isWordGuessed(word: Guess[]) {\n    return word.every(x => x === Guess.PRESENT_AND_IN_CORRECT_POSITION)\n  }\n}\n"],"names":["$02d20f9ed87de6af$export$7a872ecb27ac8565","Guess","EMPTY","NOT_PRESENT","PRESENT_BUT_NOT_IN_CORRECT_POSITION","PRESENT_AND_IN_CORRECT_POSITION","$7bf585a5fb98c0bc$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","wordsRepository","findAll","this","global","fetch","then","x","json","constructor","window","wordValidator","validate","wordToTry","wordToGuess","Array","from","length","fill","split","map","letterToTry","indexLetterToGuess","includes","getWordGuessesUseCase","async","getRandomWordToGuessUseCase","seed","words","Math","floor","view","init","boardLength","tries","triedWords","printBoard","clearBoard","i","maximumNumberOfTries","printRow","addEventListeners","onGuessWord","form","addEventListener","e","preventDefault","element","showWonMessage","alert","showLostMessage","clearInput","boardElement","innerHTML","guesses","triedWord","wordDiv","document","createElement","setAttribute","printLetterCell","appendChild","guess","triedLetter","div","classList","add","undefined","className","querySelector","resetGame","updateView","generateEmptyGuesses","values","j","push","isWordGuessed","word","every","random","execute","console","log","wordHandler","result"],"version":3,"file":"index.75da6895.js.map"}