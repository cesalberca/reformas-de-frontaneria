{"mappings":"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","sources":["src/v8-mvc/features/game/domain/guess.ts","node_modules/@swc/helpers/src/_define_property.mjs","src/v8-mvc/features/game/delivery/controller.ts","src/v8-mvc/index.ts","src/v8-mvc/features/game/infrastructure/words-http-repository.ts","src/v8-mvc/features/game/domain/word-validator.ts","src/v8-mvc/features/game/application/get-word-guesses-use-case.ts","src/v8-mvc/features/game/application/get-random-word-to-guess-use-case.ts","src/v8-mvc/features/game/delivery/view.ts"],"sourcesContent":["export enum Guess {\n  EMPTY = -2,\n  NOT_PRESENT = -1,\n  PRESENT_BUT_NOT_IN_CORRECT_POSITION = 0,\n  PRESENT_AND_IN_CORRECT_POSITION = 1,\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import { View } from './view'\nimport { GetWordGuessesUseCase } from '../application/get-word-guesses-use-case'\nimport { GetRandomWordToGuessUseCase } from '../application/get-random-word-to-guess-use-case'\nimport { Guess } from '../domain/guess'\n\nexport class Controller {\n  private static MAXIMUM_NUMBER_OF_TRIES = 6\n\n  private wordToGuess = ''\n  private tries: Guess[][] = []\n  private triedWords: string[] = []\n\n  constructor(\n    private readonly view: View,\n    private readonly getWordGuessesUseCase: GetWordGuessesUseCase,\n    private readonly getRandomWordToGuessUseCase: GetRandomWordToGuessUseCase,\n  ) {}\n\n  async start(): Promise<void> {\n    const seed = Math.random()\n    this.wordToGuess = await this.getRandomWordToGuessUseCase.execute(seed)\n    this.generateEmptyGuesses()\n    this.view.start(Controller.MAXIMUM_NUMBER_OF_TRIES, this.wordToGuess, this.tries, this.triedWords)\n    this.view.addEventListeners(this.wordHandler.bind(this))\n  }\n\n  async wordHandler(wordToTry: string): Promise<void> {\n    const result = await this.getWordGuessesUseCase.execute(wordToTry, this.wordToGuess)\n    this.tries[this.triedWords.length] = result\n    this.triedWords.push(wordToTry)\n\n    this.updateView()\n\n    if (this.isWordGuessed(result)) {\n      this.view.showWonMessage()\n      this.resetGame()\n      return\n    }\n\n    const isLastTry = this.triedWords.length === Controller.MAXIMUM_NUMBER_OF_TRIES\n\n    if (isLastTry) {\n      this.view.showLostMessage(this.wordToGuess)\n      this.resetGame()\n    }\n  }\n\n  private resetGame() {\n    this.tries = []\n    this.triedWords = []\n    this.start()\n  }\n\n  private updateView() {\n    this.view.printBoard(this.tries, this.triedWords)\n    this.view.clearInput()\n  }\n\n  private generateEmptyGuesses() {\n    for (let i = 0; i < Controller.MAXIMUM_NUMBER_OF_TRIES; i++) {\n      const values: Guess[] = []\n      for (let j = 0; j < this.wordToGuess.length; j++) {\n        values.push(Guess.EMPTY)\n      }\n      this.tries.push(values)\n    }\n  }\n\n  private isWordGuessed(word: Guess[]) {\n    return word.every(x => x === Guess.PRESENT_AND_IN_CORRECT_POSITION)\n  }\n}\n","import { GetWordGuessesUseCase } from './features/game/application/get-word-guesses-use-case'\nimport { WordValidator } from './features/game/domain/word-validator'\nimport { View } from './features/game/delivery/view'\nimport { Controller } from './features/game/delivery/controller'\nimport { GetRandomWordToGuessUseCase } from './features/game/application/get-random-word-to-guess-use-case'\nimport { WordsHttpRepository } from './features/game/infrastructure/words-http-repository'\n\nconst wordsRepository = new WordsHttpRepository(window.fetch.bind(this))\nconst wordValidator = new WordValidator()\nconst getWordGuessesUseCase = new GetWordGuessesUseCase(wordValidator)\nconst getRandomWordToGuessUseCase = new GetRandomWordToGuessUseCase(wordsRepository)\n\nconst view = new View()\nconst controller = new Controller(view, getWordGuessesUseCase, getRandomWordToGuessUseCase)\ncontroller.start()\n\nexport {}\n","import { Word } from '../domain/word'\nimport { WordsRepository } from '../domain/words-repository'\n\nexport class WordsHttpRepository implements WordsRepository {\n  constructor(private readonly fetcher: typeof globalThis.fetch) {}\n\n  findAll(): Promise<Word[]> {\n    return this.fetcher(\n      'https://gist.githubusercontent.com/cesalberca/3d0e343842c7697e0f788178e59fb471/raw/22bfe35c910dd02db78fec87fa39ca25cc604816/data.json',\n    ).then(x => x.json())\n  }\n}\n","import { Guess } from './guess'\n\nexport class WordValidator {\n  validate(wordToTry: string, wordToGuess: string): Guess[] {\n    return wordToTry.split('').map((letterToTry, indexLetterToGuess) => {\n      const letterToGuess = wordToGuess[indexLetterToGuess]\n      if (letterToTry === letterToGuess) {\n        return Guess.PRESENT_AND_IN_CORRECT_POSITION\n      }\n\n      if (wordToGuess.includes(letterToTry)) {\n        return Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION\n      }\n\n      return Guess.NOT_PRESENT\n    })\n  }\n}\n","import { WordValidator } from '../domain/word-validator'\nimport { Guess } from '../domain/guess'\n\nexport class GetWordGuessesUseCase {\n  constructor(private readonly wordValidator: WordValidator) {}\n\n  async execute(wordToTry: string, wordToGuess: string): Promise<Guess[]> {\n    return this.wordValidator.validate(wordToTry, wordToGuess)\n  }\n}\n","import { WordsHttpRepository } from '../infrastructure/words-http-repository'\n\nexport class GetRandomWordToGuessUseCase {\n  constructor(private readonly wordsRepository: WordsHttpRepository) {}\n\n  async execute(seed: number) {\n    const words = await this.wordsRepository.findAll()\n    const wordToGuess = words[Math.floor(seed * words.length)]\n    return wordToGuess\n  }\n}\n","import { Guess } from '../domain/guess'\n\nexport class View {\n  private readonly boardElement = document.querySelector<HTMLDivElement>('#board')!\n  private readonly form = document.querySelector<HTMLFormElement>('#form')!\n  private readonly element = document.querySelector<HTMLInputElement>('#input')!\n\n  private boardLength: number\n  private maxRows = 6\n\n  start(maxRows: number, wordToGuess: string, tries: Guess[][], triedWords: string[]) {\n    this.maxRows = maxRows\n    this.boardLength = wordToGuess.length\n    this.printBoard(tries, triedWords)\n    this.setInputValidation(wordToGuess)\n  }\n\n  printBoard(tries: Guess[][], triedWords: string[]) {\n    this.clearBoard()\n    for (let i = 0; i < this.maxRows; i++) {\n      this.printRow(tries[i], triedWords[i])\n    }\n  }\n\n  addEventListeners(onGuessWord: Function) {\n    this.form.addEventListener('submit', async (event: Event) => {\n      event.preventDefault()\n\n      if (!this.element.value) {\n        return\n      }\n\n      await onGuessWord(this.element.value)\n    })\n  }\n\n  showWonMessage() {\n    alert('You won! Try again!')\n  }\n\n  showLostMessage(wordToGuess: string) {\n    alert(`You lost! The word to guess was ${wordToGuess}. Try again!`)\n  }\n\n  clearInput() {\n    this.element.value = ''\n  }\n\n  private setInputValidation(wordToGuess: string) {\n    this.element.setAttribute('maxlength', wordToGuess.length.toString())\n    this.element.setAttribute('minlength', wordToGuess.length.toString())\n  }\n\n  private clearBoard() {\n    this.boardElement.innerHTML = ''\n  }\n\n  private printRow(guesses: Guess[], triedWord?: string) {\n    const word = document.createElement('div')\n    word.classList.add('row')\n\n    for (let i = 0; i < this.boardLength; i++) {\n      this.printLetterCell(word, guesses[i], triedWord?.[i])\n      this.boardElement.appendChild(word)\n    }\n  }\n\n  private printLetterCell(element: HTMLDivElement, guess: Guess, triedLetter?: string) {\n    const div = document.createElement('div')\n    div.classList.add('cell')\n    if (triedLetter !== undefined) {\n      div.innerHTML = triedLetter\n    }\n\n    let className = ''\n    switch (guess) {\n      case Guess.NOT_PRESENT:\n        className = 'not-present'\n        break\n      case Guess.PRESENT_AND_IN_CORRECT_POSITION:\n        className = 'present-and-in-correct-position'\n        break\n      case Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION:\n        className = 'present-but-not-in-correct-position'\n        break\n      case Guess.EMPTY:\n        className = 'empty'\n        break\n    }\n\n    div.classList.add(className)\n\n    element.appendChild(div)\n  }\n}\n"],"names":["$35863f3df3e859d4$export$7a872ecb27ac8565","Guess","EMPTY","NOT_PRESENT","PRESENT_BUT_NOT_IN_CORRECT_POSITION","PRESENT_AND_IN_CORRECT_POSITION","$9139f4380ced0e7c$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Controller","async","seed","Math","random","this","wordToGuess","getRandomWordToGuessUseCase","execute","generateEmptyGuesses","view","start","MAXIMUM_NUMBER_OF_TRIES","tries","triedWords","addEventListeners","wordHandler","bind","wordToTry","result","getWordGuessesUseCase","length","push","updateView","isWordGuessed","showWonMessage","resetGame","showLostMessage","printBoard","clearInput","i","values","j","word","every","x","constructor","wordsRepository","findAll","fetcher","then","json","window","fetch","undefined","wordValidator","validate","split","map","letterToTry","indexLetterToGuess","includes","words","floor","maxRows","boardLength","setInputValidation","clearBoard","printRow","onGuessWord","form","addEventListener","event","preventDefault","element","alert","setAttribute","toString","boardElement","innerHTML","guesses","triedWord","document","createElement","classList","add","printLetterCell","appendChild","guess","triedLetter","div","className","querySelector"],"version":3,"file":"index.56f45870.js.map"}