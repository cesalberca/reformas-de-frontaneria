{"mappings":"6IAAA,IAAOA,YAAKC,GAAAA,EAAAA,EACC,aAAXC,GAAAA,cADUD,EAAAA,EAEyB,oCAAG,GAAtCE,sCAFUF,EAAAA,EAGqB,gCAAG,GAAlCG,mCAHUH,IAAAA,EAAL,KCIP,MAAMI,EAAkB,ICFjB,MAGLC,UACE,OAAOC,KAAKC,OACTC,MACC,yIAEDC,MAAKC,GAAKA,EAAEC,SAPjBC,YAA6BL,QAAAA,OAAAA,IDCaM,QACtCC,EAAOC,KAAKC,SACZC,EAAwB,IEHvB,MAGQC,cAACC,EAAmBC,GAC/B,MAAMC,ECLH,SAAkBF,EAAmBC,GAC1C,OAAOD,EAAUG,MAAM,IAAIC,KAAI,CAACC,EAAaC,KAC3C,MAAMC,EAASN,EAAYO,QAAQH,GACnC,OAAe,IAAXE,EACK1B,EAAMC,YAGXyB,IAAWD,EACNzB,EAAME,oCAGRF,EAAMG,mCDNGyB,CAAST,EAAWC,GACpC,OAAOC,EAJTT,iBFGIiB,EAA8B,IIL7B,MAEQX,gBACX,MAAMY,QAAcxB,KAAKF,gBAAgBC,UAEzC,OADoByB,EAAMf,KAAKgB,MAAMzB,KAAK0B,kBAAoBF,EAAMG,SAHtErB,YAA6BR,EAAmD4B,QAAnD5B,gBAAAA,OAAmD4B,gBAAAA,IJId5B,GAAiB,IAAMU,IAErFoB,EAAOC,SAASC,cAA+B,SAC/CC,EAAUF,SAASC,cAAgC,UAEzDF,EAAKI,iBAAiB,UAAUpB,MAAMqB,IACpC,MAAMnB,QAAoBS,EAA4BW,UACtDD,EAAEE,iBACF,MAAMC,QAAezB,EAAsBuB,QAAQH,EAAQM,MAAOvB,GAClEwB,QAAQC,IAAI,QAAEH","sources":["src/v9/guess.ts","src/v9/index.ts","src/v9/words-repository.ts","src/v9/get-word-guesses-use-case.ts","src/v9/validate.ts","src/v9/get-random-word-to-guess-use-case.ts"],"sourcesContent":["export enum Guess {\n  NOT_PRESENT = -1,\n  PRESENT_BUT_NOT_IN_CORRECT_POSITION = 0,\n  PRESENT_AND_IN_CORRECT_POSITION = 1,\n}\n","import { WordsRepository } from './words-repository'\nimport { GetWordGuessesUseCase } from './get-word-guesses-use-case'\nimport { GetRandomWordToGuessUseCase } from './get-random-word-to-guess-use-case'\n\nconst wordsRepository = new WordsRepository(window)\nconst seed = Math.random()\nconst getWordGuessesUseCase = new GetWordGuessesUseCase()\nconst getRandomWordToGuessUseCase = new GetRandomWordToGuessUseCase(wordsRepository, () => seed)\n\nconst form = document.querySelector<HTMLFormElement>('#form')\nconst element = document.querySelector<HTMLInputElement>('#input')\n\nform.addEventListener('submit', async e => {\n  const wordToGuess = await getRandomWordToGuessUseCase.execute()\n  e.preventDefault()\n  const result = await getWordGuessesUseCase.execute(element.value, wordToGuess)\n  console.log({ result })\n})\n\nexport {}\n","type Word = string\n\nexport class WordsRepository {\n  constructor(private readonly global: typeof globalThis) {}\n\n  findAll(): Promise<Word[]> {\n    return this.global\n      .fetch(\n        'https://gist.githubusercontent.com/cesalberca/3d0e343842c7697e0f788178e59fb471/raw/22bfe35c910dd02db78fec87fa39ca25cc604816/data.json',\n      )\n      .then(x => x.json())\n  }\n}\n","import { validate } from './validate'\nimport { Guess } from './guess'\n\nexport class GetWordGuessesUseCase {\n  constructor() {}\n\n  async execute(wordToTry: string, wordToGuess: string): Promise<Guess[]> {\n    const guesses = validate(wordToTry, wordToGuess)\n    return guesses\n  }\n}\n","import { Guess } from './guess'\n\nexport function validate(wordToTry: string, wordToGuess: string): Guess[] {\n  return wordToTry.split('').map((letterToTry, indexLetterToGuess) => {\n    const status = wordToGuess.indexOf(letterToTry)\n    if (status === -1) {\n      return Guess.NOT_PRESENT\n    }\n\n    if (status !== indexLetterToGuess) {\n      return Guess.PRESENT_BUT_NOT_IN_CORRECT_POSITION\n    }\n\n    return Guess.PRESENT_AND_IN_CORRECT_POSITION\n  })\n}\n\nexport {}\n","import { WordsRepository } from './words-repository'\n\nexport class GetRandomWordToGuessUseCase {\n  constructor(private readonly wordsRepository: WordsRepository, private readonly randomGenerator: () => number) {}\n  async execute() {\n    const words = await this.wordsRepository.findAll()\n    const wordToGuess = words[Math.floor(this.randomGenerator() * words.length)]\n    return wordToGuess\n  }\n}\n"],"names":["$a227236a0e777d38$export$7a872ecb27ac8565","Guess","NOT_PRESENT","PRESENT_BUT_NOT_IN_CORRECT_POSITION","PRESENT_AND_IN_CORRECT_POSITION","wordsRepository","findAll","this","global","fetch","then","x","json","constructor","window","seed","Math","random","getWordGuessesUseCase","async","wordToTry","wordToGuess","guesses","split","map","letterToTry","indexLetterToGuess","status","indexOf","validate","getRandomWordToGuessUseCase","words","floor","randomGenerator","length","form","document","querySelector","element","addEventListener","e","execute","preventDefault","result","value","console","log"],"version":3,"file":"index.7fc2068b.js.map"}